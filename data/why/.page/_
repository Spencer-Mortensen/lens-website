<h2>Your time is valuable</h2>

<p><b>Lens reduces the time spent unit testing by over 50%.</b>
How many hours have you spent writing and testing code?
Imagine what you could accomplish if <i>half</i> your time were returned to you.</p>


<h2>You’re at risk</h2>

<p><b>What about side effects?</b>
Assertion-based frameworks only check the values in your assertions.
If it wasn’t asserted, <i>it didn’t get checked.</i></p>

<p>At any time, you could be bitten by:</p>

<ul>
	<li>a malicious system call buried in a merge request</li>
	<li>a forgotten debugging statement that will break your AJAX</li>
	<li>a suppressed warning that could have revealed a big issue</li>
	<li>filesystem calls that assume your development area resembles production</li>
	<li>a new pass-by-reference behavior that will overwrite your variables</li>
</ul>

<p>
Assertion-based frameworks <i>won’t</i> protect you and they <i>won’t</i> check every side effect.
<b>Lens will.</b></p>


<h2>You want 100%</h2>

<p>In almost every codebase, there is <i>some</i> code that goes untested.
Usually, it’s the controller or the data-access layer.
Even with partial mocks, and considerable effort, there is some code that escapes testing.</p>

<p>With most unit-testing frameworks, the best you can hope for is <i>almost</i> or <i>good enough</i>.
<b>With Lens, you can get 100%.</b>
(And without any special effort.)</p>