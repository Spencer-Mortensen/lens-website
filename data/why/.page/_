<h2>You’re vulnerable</h2>

<p>That method you’re unit testing?
It could destroy your development environment with a filesystem call.
It could use pass-by-reference to make changes to other parts of your code.
It could write to your output buffer and corrupt your AJAX.
It could interact with global variables, call public static methods, or instantiate unsafe objects.</p>

<p>Assertion-based frameworks only check the value in your assertion.
If it wasn’t asserted, <b><i>it didn’t get checked</i></b>.</p>

<p>Lens is different.
Lens goes far beyond assertions.
Lens examines the whole PHP execution environment.
This gives Lens a simple way to detect side effects.
Assertions check a single value.
<b>Lens checks every side effect</b> on every test.</p>


<h2>You want to build projects</h2>

<p>Lens eliminates assertions, and all of the boiller-plate code that goes with it.
That accelerates your development in two ways:</p>

<ul>
	<li>It cuts your unit-testing work in half.</li>
	<li>It eliminates the learning curve: You’re already familiar with your own project code, and that’s literally all that’s left!</li>
</ul>


<h2>You want 100%</h2>

<p>In almost every codebase, there is <i>some</i> code that goes untested.
Usually, it’s the controller or the data-access layer.
Even with partial mocks, and considerable effort, there is some code that escapes testing.</p>

<p>With most unit-testing frameworks, the best you can hope for is <i>almost</i> or <i>good enough</i>.
With Lens, <b>you can finally reach 100% code coverage</b>.</p>

<p>Time to show off your numbers!</p>

<p><a href="<:url "guide/":>">Now let’s get you started!</a></p>