<p>Lens is a unit-testing framework for PHP.
You get a command-line tool that you can run after you’ve refactored your code, so you can see right away if anything is broken or untested.</p>

<p>Lens is unlike any other unit-testing framework—and its users absolutely <i>love</i> it!</p>

<h2>Why use Lens?</h2>

<h3>Lens makes you more productive</h3>

<p>Lens is so simple that it gets out of your way and lets you focus on your project.
Here’s an example of a unit test:</p>

<div class="porthole">
	<pre><code>// Test
$x = 1 + 1;

// Output
$x = 2;</code></pre>
</div>

<p>Lens is an <i>invisible</i> framework: you’ll never see it appear anywhere in your tests.
That means there is there is almost no learning curve and nothing to stand in your way.
Lens lets you focus on your project: What could be nicer than that?</p>

<h3>Lens makes you more confident</h3>

<p>Lens catches anything that differs from your expected output.
Lens catches notices and warnings, a stray echo statement, a surprise global variable, and anything else that could possibly go wrong.
Other unit-testing frameworks check <i>only those things that are made explicit in your assertions</i>.
Lens widens the net and catches everything.</p>

<!--<p>Some things can never be undone, such as a constant definition or a fatal error:
In other unit-testing frameworks, these things “bleed through” to affect your remaining tests.
Lens protects you by running all of your tests in parallel, with each test in its own isolated process.
Lens guarantees test isolation.</p>-->

<h2 id="guide">How do I use Lens?</h2>

<p>You can download Lens by running a single command:</p>

<div class="terminal">
	<div>Download Lens</div>
	<pre><code>sudo php -r '$file = "/usr/local/bin/lens"; copy("http://lens.guide/lens.phar", $file); chmod($file, 0755);'</code></pre>
</div>

<p>And now you can use Lens in your projects!</p>

<div class="terminal">
	<div>Verify Lens</div>
	<pre><code>lens --version</code></pre>
</div>

<h3>Getting started</h3>

<p>All you really need to get started is a test file like this one:</p>

<div class="file">
	<div>Math.php</div>
	<pre><code class="php">&lt;?php

<span class="comment">// Test</span>
$<span class="name">x</span> = <span class="value">1</span> + <span class="value">1</span>;

<span class="comment">// Output</span>
$<span class="name">x</span> = <span class="value">2</span>;</code></pre>
</div>

<p>Now run Lens to see the results:</p>

<div class="terminal">
	<div>Run Lens</div>
	<pre><code>lens Math.php
# Passed tests: 1</code></pre>
</div>

<a href="/examples/Example-1.zip" class="download">Download this example</a>

<p>Now let’s move this code into a class, so we can run some more realistic tests.
Let’s create a “src” directory with the following file:</p>

<div class="file">
	<div>src/Math.php</div>
	<pre><code class="php">&lt;?php

class <span class="name">Math</span>
{
    public function <span class="name">add</span>($<span class="name">m</span>, $<span class="name">n</span>)
    {
        return $<span class="name">m</span> + $<span class="name">n</span>;
    }
}</code></pre>
</div>

<p>And a “tests” directory with the new tests file:</p>

<div class="file">
	<div>tests/Math.php</div>
	<pre><code class="php">&lt;?php

<span class="comment">// Test</span>
<span class="green">$<span class="name">math</span> = new <span class="name">Math</span>();
$<span class="name">x</span> = $<span class="name">math</span>-&gt;<span class="name">add</span>(<span class="value">1</span>, <span class="value">1</span>);</span>

<span class="comment">// Output</span>
$<span class="name">x</span> = <span class="value">2</span>;
</code></pre>
</div>

<p>You can see that we’re using our new class in the test now.
We’ll need to load that new class somehow, so let’s create an autoload file.
We’ll use a stub for now:</p>

<div class="file">
	<div>autoload.php</div>
	<pre><code class="php">&lt;?php

require __DIR__ . <span class="value">'/src/Math.php'</span>;</code></pre>
</div>

<p>Now let’s run Lens again:</p>

<div class="terminal">
	<div>Run Lens</div>
	<pre><code>lens
# Passed tests: 1</code></pre>
</div>

<p>The test still passes… and now a “coverage” directory has appeared!
Take a look inside that “coverage” directory:
You’ll see a line-by-line view of the unit-test coverage for the project.
Right now, we’re at 100% coverage:</p>

<div id="coverage-directory" class="photo"><img width="169" height="71" src=".page/coverage-directory.png" alt="Code coverage: directory view"></div>

<div id="coverage-file" class="photo"><img width="284" height="327" src=".page/coverage-file.png" alt="Code coverage: file view"></div>

<a href="/examples/Example-2.zip" class="download">Download this example</a>

<p>But now let’s introduce a <i>bug</i> in the source code:</p>

<div class="file">
	<div>src/Math.php</div>
	<pre><code class="php">&lt;?php

class <span class="name">Math</span>
{
    public function <span class="name">add</span>($<span class="name">m</span>, $<span class="name">n</span>)
    {
        <b class="red">echo <span class="value">"m: $m\n"</span>;</b>
        return $<span class="name">m</span> + $<span class="name">n</span>;
    }
}</code></pre>
</div>

<p>The unit test will fail:</p>

<div class="terminal">
	<div>Run Lens</div>
	<pre><code>lens
# Math.php (Line 8):
#
#    // Test
#    $x = $math-&gt;add(1, 1);
# 
#    // Output
#    $x = 2;
# 
#    // Issues
#  + echo "m: 1\n";
#
#
# Failed tests: 1</code></pre>
</div>

<p>Lens is a detector for unexpected behavior.
That “echo” statement wasn’t listed under our expected “Output” section, so Lens alerted us to the discrepancy.</p>

<a href="/examples/Example-3.zip" class="download">Download this example</a>

<p>Now, let’s fix the issue and add another method:</p>

<div class="file">
	<div>src/Math.php</div>
	<pre><code class="php">&lt;?php

class <span class="name">Math</span>
{
    public function <span class="name">add</span>($<span class="name">m</span>, $<span class="name">n</span>)
    {
        return $<span class="name">m</span> + $<span class="name">n</span>;
    }

<span class="green">    public function <span class="name">multiply</span>($<span class="name">m</span>, $<span class="name">n</span>)
    {
        return $<span class="name">m</span> * $<span class="name">n</span>;
    }</span>
}</code></pre>
</div>

<p>And let’s write some more unit tests:</p>

<div class="file">
	<div>tests/Math.php</div>
	<pre><code class="php">&lt;?php


<span class="comment">// Test</span>
$<span class="name">math</span> = new <span class="name">Math</span>();
$<span class="name">x</span> = $<span class="name">math</span>-&gt;<span class="name">add</span>(<span class="value">1</span>, <span class="value">1</span>);

<span class="comment">// Output</span>
$<span class="name">x</span> = <span class="value">2</span>;


<span class="comment">// Test</span>
$<span class="name">math</span> = new <span class="name">Math</span>();
$<span class="name">x</span> = $<span class="name">math</span>-&gt;<span class="name">multiply</span>(<span class="green">$<span class="name">a</span></span>, <span class="green">$<span class="name">b</span></span>);

<span class="green"><span class="comment">// Input</span>
$<span class="name">a</span> = <span class="value">1</span>;
$<span class="name">b</span> = <span class="value">1</span>;</span>

<span class="comment">// Output</span>
$<span class="name">x</span> = <span class="value">1</span>;

<span class="green"><span class="comment">// Input</span>
$<span class="name">a</span> = <span class="value">0</span>;
$<span class="name">b</span> = <span class="value">1</span>;</span>

<span class="comment">// Output</span>
$<span class="name">x</span> = <span class="value">0</span>;</code></pre>
</div>

<p>As you can see, you can include more than one test in your tests file.
It’s common to write one file per class.</p>

<p>And, as you might have guessed, you can specify an “Input” section for each test:
With both the “Input” and “Output” specified, your test is fully parameterized.
You can reuse the same test many times with different input and output.</p>

<a href="/examples/Example-4.zip" class="download">Download this example</a>

<p>All right, I think that’s enough to get you started.
I hope you enjoy discovering everything you can do with this unit testing framework.
After all, I built it for you :)</p>

<p>And be sure to check out the <a href="/documentation/">documentation</a> if you’d like more detailed information on any specific topic.</p>