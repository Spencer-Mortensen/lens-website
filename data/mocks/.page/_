<p>Unit testing works well for methods that have controlled dependencies and no side effects.
Let’s write a class that depends on an uncontrolled external resource and has dangerous side effects.
Here’s an example:</p>

<div class="file">
    <div>src/Terminal.php</div>
    <pre><code class="php">&lt;?php

namespace <span class="name">Example</span>;

class <span class="name">Terminal</span>
{
    public function <span class="name">read</span>()
    {
        return rtrim(fgets(STDIN), <span class="value">"\n"</span>);
    }

    public function <span class="name">write</span>($<span class="name">line</span>)
    {
        fputs(STDOUT, $<span class="name">line</span> . <span class="value">"\n"</span>);
    }
}</code></pre>
</div>

<p>This “Terminal” class communicates with the user by sending text messages through the terminal.
When the user is typing in a response, this code will block the execution of the script.
That blocking behavior will make it a real challenge to run our tests!</p>

<p>But first, let’s see it in action.
Let’s write a tiny class that uses the “Terminal”:</p>

<div class="file">
    <div>src/Speller.php</div>
    <pre><code class="php">&lt;?php

namespace <span class="name">Example</span>;

class <span class="name">Speller</span>
{
    private $<span class="name">terminal</span>;

    public function __construct(<span class="name">Terminal</span> $<span class="name">terminal</span>)
    {
        $this-&gt;<span class="name">terminal</span> = $<span class="name">terminal</span>;
    }

    public function <span class="name">start</span>()
    {
        $this-&gt;<span class="name">terminal</span>-&gt;<span class="name">write</span>(<span class="value">"Type a word:"</span>);

        $<span class="name">word</span> = $this-&gt;<span class="name">terminal</span>-&gt;<span class="name">read</span>();
        $<span class="name">spelling</span> = $this-&gt;<span class="name">spell</span>($<span class="name">word</span>);

        $this-&gt;<span class="name">terminal</span>-&gt;<span class="name">write</span>(<span class="value">"The word \"{$word}\" is spelled: {$spelling}!"</span>);
    }

    private function <span class="name">spell</span>($<span class="name">word</span>)
    {
        return implode(<span class="value">'-'</span>, str_split(strtoupper($<span class="name">word</span>)));
    }
}</code></pre>
</div>

<p>And let’s add an autoloader to load these new classes:</p>

<div class="file">
    <div>autoload.php</div>
    <pre><code class="php">&lt;?php

spl_autoload_register(
    function ($<span class="name">class</span>) {
        $<span class="name">namespacePrefix</span> = <span class="value">'Example\\'</span>;
        $<span class="name">namespacePrefixLength</span> = strlen($<span class="name">namespacePrefix</span>);

        if (strncmp($<span class="name">class</span>, $<span class="name">namespacePrefix</span>, $<span class="name">namespacePrefixLength</span>) !== <span class="value">0</span>) {
            return;
        }

        $<span class="name">relativeClassName</span> = substr($<span class="name">class</span>, $<span class="name">namespacePrefixLength</span>);
        $<span class="name">filePath</span> = __DIR__ . <span class="value">'/src/'</span> . strtr($<span class="name">relativeClassName</span>, <span class="value">'\\'</span>, <span class="value">'/'</span>) . <span class="value">'.php'</span>;

        if (is_file($<span class="name">filePath</span>)) {
            include $<span class="name">filePath</span>;
        }
    }
);</code></pre>
</div>

<p>And let’s add a script, so we can run the new tool:</p>

<div class="file">
    <div>speller.php</div>
    <pre><code class="php">&lt;?php

namespace <span class="name">Example</span>;

require <span class="value">'autoload.php'</span>;

$<span class="name">terminal</span> = new <span class="name">Terminal</span>();
$<span class="name">speller</span> = new <span class="name">Speller</span>($<span class="name">terminal</span>);

$<span class="name">speller</span>-&gt;<span class="name">start</span>();</code></pre>
</div>

<p>And now we can run the spelling tool:</p>

<div class="terminal">
    <div>Run the spelling tool:</div>
    <pre><code>php speller.php
# Type a word:
# perfectly
# The word "perfectly" is spelled: P-E-R-F-E-C-T-L-Y!</code></pre>
</div>

<p>Yes, try running this little spelling tool on the command line!
Can you think of a word that it <i>can’t</i> spell?</p>

<a href="/examples/Example-5.zip" class="download">Download this example</a>

<p>Okay!
But how will we test it?
The “Terminal” class will halt the execution of our tests! And the “Speller” won’t run without the “Terminal”!</p>

<p>What we need is a <i>mock</i>:
A mock will provide the same external behavior as the real “Terminal” class, but without actually reading and writing to the terminal, and without blocking execution:</p>

<div class="file">
    <div>tests/Speller.php</div>
    <pre><code class="php">&lt;?php

namespace <span class="name">Example</span>;

// Test
$<span class="name">speller</span> = new <span class="name">Speller</span>($<span class="name">terminal</span>);
$<span class="name">speller</span>-&gt;<span class="name">start</span>();

// Input
$<span class="name">terminal</span> = new <span class="name">Terminal</span>(); <span class="green">// Mock</span>

// Output
<span class="green">$<span class="name">terminal</span>-&gt;<span class="name">write</span>(<span class="value">'Type a word:'</span>);
$<span class="name">terminal</span>-&gt;<span class="name">read</span>(); // return 'perfectly';
$<span class="name">terminal</span>-&gt;<span class="name">write</span>(<span class="value">'The word "perfectly" is spelled: P-E-R-F-E-C-T-L-Y!'</span>);</span></code></pre>
</div>

<p>Like everything in Lens, mocks are simple.
Adding that “// Mock” comment was enough to create a mock, and we provided its expected behavior under the “Output” section.</p>

<p>That’s all there is to it!</p>

<div class="terminal">
	<div>Run Lens</div>
	<pre><code>lens
# Passed tests: 1</code></pre>
</div>

<a href="/examples/Example-6.zip" class="download">Download this example</a>
