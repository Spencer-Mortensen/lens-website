<p>Fatal errors are seemingly impossible to catch.
A try-catch block can handle an <code><a href="http://php.net/manual/en/class.exception.php">Exception</a></code> or an <code><a href="http://php.net/manual/en/class.error.php">Error</a></code>, but a raw PHP notice, warning, or error will slip right through!</p>

<code>try {
	define(Pi, 3);
} catch (Exception $exception) {
	echo 'Not executed!';
} catch (Error $error) {
	echo 'Not executed!';
}</code>

<p>The raw PHP errors aren’t thrown objects, so they can’t be caught in a try-catch block.
But they <i>can</i> be turned into exceptions using the <code><a href="http://php.net/manual/en/function.set-error-handler.php">set_error_handler</a></code>:</p>

<code>$onError = function ($level, $message, $file, $line) {
	$message = trim($message);
	$code = null;

	throw new ErrorException($message, $code, $level, $file, $line);
};

try {
	set_error_handler($onError);
	define(Pi, 3);
} catch (Exception $exception) {
	echo 'Exception: ', $exception->getMessage(), "\n";
} catch (Error $error) {
	echo 'Error: ', $error->getMessage(), "\n";
} finally {
	restore_error_handler();
}</code>

<p>This lets us catch raw PHP errors!
And the <code><a href="http://php.net/manual/en/function.restore-error-handler.php">restore_error_handler</a></code> returns everything to normal, so there won’t be any side-effects for the rest of our codebase.</p>

<p>This lets us catch raw PHP errors.
But, unfortunately, only the <i>mildest</i> of errors.
The more severe errors cannot be caught this way (E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING, and many E_STRICT errors).</p>

<p>The trouble is that PHP <i>shuts down</i> when it encounters a fatal error, so our try-catch block won’t even run.
But there is one thing that <i>will</i> run just before PHP shuts down: <i>a shutdown function</i>.</p>

<code>$onShutdown = function () {
	$error = error_get_last();

	if ($error === null) {
		return;
	}

	$message = trim($error['message']);
	$code = null;
	$level = $error['type'];
	$file = $error['file'];
	$line = $error['line'];

	$exception = new ErrorException($message, $code, $level, $file, $line);

	echo 'Error: ', $exception->getMessage(), "\n";
};

register_shutdown_function($onShutdown);
error_reporting(0);

require '';</code>

<p>This lets us handle even a fatal error!</p>

<p>But there is a little more we can do.
We can define a global exception handler, so we can catch any thrown object that makes it up to the global scope unexpectedly:</p>

<code>$onException = function ($exception) {
	echo "Exception: ", $exception->getMessage(), "\n";
};

set_exception_handler($onException);

throw new Exception('Armageddon');</code>

<p>At this point, we’re feeling pretty safe:</p>

<ul>
	<li>We can catch both Exceptions and Errors, even if they make it up to the global scope.</li>
	<li>We can catch raw PHP notices, warnings, and errors—including some fatal errors.</li>
</ul>

<p>But there are still a few fatal errors that we cannot catch!
For example, a compile-time syntax error or a run-time maximum-function-nesting error can’t be caught from within the PHP script itself.
To catch <i>those</i> types of errors, we <i>also</i> need to be monitoring the exit code and the STDERR of the script.</p>

<ul id="share">
	<li><a title="Tweet about this article" href="https://twitter.com/intent/tweet?text=Handle%20a%20PHP%20fatal%20error&amp;url=http%3A%2F%2Flens.guide%2Farticles%2Fhandle-a-fatal-error%2F&amp;hashtags=php" class="svg"><:include "theme/images/twitter.svg/":></a></li>
	<li><a title="Share this article on Facebook" href="https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Flens.guide%2Farticles%2Fhandle-a-fatal-error%2F" class="svg"><:include "theme/images/facebook.svg/":></a></li>
	<li><a title="Share this article on LinkedIn" href="https://www.linkedin.com/shareArticle?url=http%3A%2F%2Flens.guide%2Farticles%2Fhandle-a-fatal-error%2F&amp;title=Handle%20a%20PHP%20fatal%20error&amp;summary=We%E2%80%99d%20love%20to%20catch%20and%20handle%20fatal%20errors%20in%20our%20code.%20But%20that%20doesn%E2%80%99t%20seem%20possible%21%20After%20all%2C%20a%20fatal%20error%20is%20fatal%E2%80%94isn%E2%80%99t%20it%3F%20And%2C%20yet%2C%20Lens%20does%20it.%20Handle%20fatal%20errors%20with%20a%20technique%20straight%20out%20of%20Lens%21&amp;mini=true" class="svg"><:include "theme/images/linked-in.svg/":></a></li>
	<li><a title="Send this article by email" href="mailto:?subject=Handle%20a%20PHP%20fatal%20error&amp;body=Read%20the%20article%3A%0Ahttp%3A%2F%2Flens.guide%2Farticles%2Fhandle-a-fatal-error%2F" class="svg"><:include "theme/images/email.svg/":></a></li>
</ul>
